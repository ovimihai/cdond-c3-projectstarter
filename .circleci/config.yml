version: 2.1

# amazon/aws-cli https://github.com/aws/aws-cli/blob/v2/docker/Dockerfile

orbs: 
  # https://app.slack.com/client/T02VB06R882/C0309KFK4SD
  slack: circleci/slack@4.6.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    # https://circleci.com/docs/2.0/reusing-config/
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            exit 0
            if aws s3 ls | grep udapeople-<<parameters.workflow_id>>; then
              aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            fi

            aws s3api delete-bucket --bucket udapeople-<<parameters.workflow_id>>

            aws cloudformation delete-stack \
              --stack-name "udapeople-backend-<< parameters.workflow_id >>"

            aws cloudformation delete-stack \
              --stack-name "udapeople-frontend-<< parameters.workflow_id >>"
      - revert-migrations:
          workflow_id: <<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            
            SUCCESS=$(curl --insecure  https://kvdb.io/$KVDB_KEY/migration_<< parameters.workflow_id >>)
            echo $SUCCESS
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: oviregie/circleci-node-ansible-aws:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            exit 0
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: oviregie/circleci-node-ansible-aws:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # exit 0
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
  test-frontend:
    docker:
      - image: oviregie/circleci-node-ansible-aws:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            exit 0
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: oviregie/circleci-node-ansible-aws:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            exit 0
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: oviregie/circleci-node-ansible-aws:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
            exit 0
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: oviregie/circleci-node-ansible-aws:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            exit 0
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          # https://app.slack.com/block-kit-builder/T02VB06R882
          custom: |
                  {
                    "blocks": [
                      {
                        "type": "section",
                        "fields": [
                          {
                            "type": "plain_text",
                            "text": "Backend Security audit failed",
                            "emoji": true
                          }
                        ]
                      }
                    ]
                  }

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            rm -fr ~/project/.circleci/ansible/inventory.txt
            cp ~/project/.circleci/ansible/inventory_template.txt ~/project/.circleci/ansible/inventory.txt
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters 'Name=tag:Name,Values=backend-*' \
              --query "Reservations[*].Instances[0].PublicIpAddress" \
              --output text)
             echo $BACKEND_IP >> ~/project/.circleci/ansible/inventory.txt
            
            echo API_URL="http://${BACKEND_IP}:3030" >> ~/project/frontend/.env
            echo FRONTEND_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees" >> ~/project/frontend/.env
            cat frontend/.env
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - project/frontend/.env
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: oviregie/circleci-node-ansible-aws:13.8.0
    steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["cf:dd:21:72:b3:b5:53:66:16:32:e3:b7:01:7c:6b:6f"] 
        # - run:
        #     name: Install Dependencies
        #     command: |
        #       sudo apt update -y
        #       sudo apt install -y python
        #       sudo apt install -y python-pip
        #       sudo apt install -y ansible
        #       pip install awscli
        - attach_workspace:
            at: ~/
        - run:
            name: Configure server
            command: |
              # Your code here
              cd ~/project/.circleci/ansible/
              cat inventory.txt
              ansible-playbook -i inventory.txt configure-server.yml
        - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: oviregie/circleci-node-ansible-aws:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            exit 0
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            exit 0
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl -k https://kvdb.io/$KVDB_KEY/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: oviregie/circleci-node-ansible-aws:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      # - run:
      #     name: Install dependencies
      #     command: |
      #       sudo apt update -y
      #       sudo apt install -y python
      #       sudo apt install -y python-pip
      #       # sudo apt install -y ansible
      #       pip install awscli
      - attach_workspace:
            at: ~/
      - run:
          name: Get backend url
          command: |
            source ~/project/frontend/.env
            export API_URL="${API_URL}"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-${CIRCLE_WORKFLOW_ID:0:7}.tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
                    
  deploy-backend:
    docker:
      - image: oviregie/circleci-node-ansible-aws:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      # - run:
      #     name: Install dependencies
      #     command: |
      #       sudo apt update -y
      #       sudo apt install -y python
      #       sudo apt install -y python-pip
      #       sudo apt install -y ansible
      #       pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            pwd
            tar -C backend -czvf ~/project/artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: oviregie/circleci-node-ansible-aws:13.8.0
    steps:
      - checkout
      # - run:
      #     name: Install dependencies
      #     command: |
      #       sudo apt update
      #       sudo apt install -y awscli
      - attach_workspace:
            at: ~/
      - run:
          name: Get backend url
          command: |
            source ~/project/frontend/.env
            
      - run:
          name: Backend smoke test.
          command: |
            source ~/project/frontend/.env
            echo "${API_URL}"
            sleep 30
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |           
            source ~/project/frontend/.env
            echo ${FRONTEND_URL} 
            if curl -s ${FRONTEND_URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"

      - run:
          name: Remove old stacks and files
          command: |
            echo OldWorkflowID: "${OldWorkflowID}"
            echo Stack names: "${STACKS[@]}"


            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
            then
              if aws s3 ls | grep udapeople-${OldWorkflowID}; then
                aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              fi

              aws s3api delete-bucket --bucket udapeople-${OldWorkflowID}

              aws cloudformation delete-stack \
                --stack-name "udapeople-backend-${OldWorkflowID}"

              aws cloudformation delete-stack \
                --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "No old stack"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]